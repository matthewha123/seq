# test kmers |> canonical optimization
@test
def test[K](s: seq):
    type K = Kmer[5]

    got1 = list[K]()
    s |> kmers[K](1) |> canonical |> got1.append
    exp1 = [min(k, ~k) for k in s.kmers[K](step=1)]
    assert got1 == exp1

    got2 = list[tuple[int,K]]()
    s |> kmers_with_pos[K](step=1) |> canonical_with_pos |> got2.append
    exp2 = [(i, min(k, ~k)) for i,k in s.kmers_with_pos[K](step=1)]
    assert got2 == exp2

    # test revcomp'd seq
    s = ~s

    got1 = list[K]()
    s |> kmers[K](step=1) |> canonical |> got1.append
    exp1 = [min(k, ~k) for k in s.kmers[K](step=1)]
    assert got1 == exp1

    got2 = list[tuple[int,K]]()
    s |> kmers_with_pos[K](1) |> canonical_with_pos |> got2.append
    exp2 = [(i, min(k, ~k)) for i,k in s.kmers_with_pos[K](step=1)]
    assert got2 == exp2

def test_all[K](s: list[seq]):
    for a in s:
        test[K](a)

v = [   s'C',
        s'GA',
        s'CTC',
        s'TATG',
        s'GTAGC',
        s'TGCAGT',
        s'TACTAGG',
        s'GTTAGAAA',
        s'TGGATCATA',
        s'TTGGCCACGG',
        s'CCTCTGCGGGA',
        s'ATGATAGGAAAG',
        s'CTCTTTGGGGTTA',
        s'GCAGTTTTTCGCTT',
        s'GCTTTGTGAAATGGT',
        s'CATGGAGCGGCCGTGT',
        s'TTAACGGGCCCTTGCCG',
        s'CCTTGTTTGCTCGCGAGA',
        s'GGCCAAGCTTATCTGTGTT',
        s'CCGCTTGCCTTACATTGGCC',
        s'GAGTGTGTAATAAATAATCGT',
        s'GCGACAATATACTGCGTGGTCA',
        s'TTCATATATGACCCCGTACAGGG',
        s'GCTTTGATGAATTAAGGATAGCTT',
        s'GTTATATCCCCCCGCGCTTTAACCG',
        s'AAACCTGACCGTTAAGACTTTAAGAC',
        s'GACCTTGCCCTTGAAGGAACATCTGGG',
        s'CGTCCATGTTTGCATACGACGTTGTGTT',
        s'TAAACGAGACCGTCTCTGCTCATAGCCGT',
        s'CAGTACGTTAGTGTGACCGCAAAAGGTGGT',
        s'GAGGATATATAACAACCTCAGGAGTCTGTTC',
        s'AGGATAAGGTTCACAGAACTATTGTTATGATT',
        s'CACAGAGAGCGGGCTCTATTGTTGTCGTGGGGA',
        s'TACTCGTGGCGAGGAGGAGTTTTCTTAAATCGGA',
        s'GGGCTTTTCGCCTGGTTATAACTTGGTATGGAGCT',
        s'AGGACATTTAAGATTTAAAAGCACCCTCAGCAACAT',
        s'CATGAAGGATCAGTGACTTCCTTACCTGTGCTGCCGG',
        s'CGTATTGGTTCGTGACTTCCACGGGGTGTCACGGCGGA',
        s'GCGAAACGCATCATCCGGGACAATCAACTCATCAGGCGG',
        s'CACAACCGGGGCTCGATCCCAAGCACCATTACACGATGAC',
        s'TCACGAAGACACAACGGTCCACACCTACTTTCCCCCCAACG',
        s'ATCTACTGAAGCGCTACAGTCATCTACTGCCACTGAACGGAC',
        s'GTGTCCATGCTCCGTTTAAAATAGAGAAGCCAAAGGAGTACCA',
        s'AGTAGGCTGCAAATCGATCGCCACGCAAATGCTAAAAGTTGTGC',
        s'GTGATTAGAGGAGGTAACAGCCCAAACGCTCTCTTCCTCGCTATA',
        s'TGTTGTGTCCGATAAGATTGCGTCCTGGTGGAGTGGTTGCGGGTTA',
        s'GCTTAACTAACCGAGCCGGTGCGGAGATTCCGTGTGTGGCTAGTTAT',
        s'CTCGCGTGCGGAGACCTCTCCCCCAGGAATAACCGATTGACCGTGGAT',
        s'ACATTCGCAGATAGGGCAACGGTTTAGTGCGCACCATGCTAAGCTAAGG',
        s'TTTGCACCGGTTAGCTGTCGTTAATCCGACGGGCCTTATCTCGGTACATT',
        s'TACTCGGACATCCATCCAAAGTTGGAGATAGCTTTGTATGAAAATGATGTA',
        s'CAGACTTTCTTATGTATCCCTCTCTTGCACAGATTGTTCATGTCATTTGCTG',
        s'CAGCGGGCCCTCTGCTTATAGCCGGGTAGTCCGTATTACGACCGAGGTCCCGT',
        s'GGGTAACAACAAAGGATGAGGTTAATTCGGAGGGAAAACGTCGCGAACGATAGT',
        s'GCTGAGCCCAGGAGGGGAGCTCTCGGGAGTCGCAATGAGATCCGTGGGCCCCCAA',
        s'CGATTAGCGACCAAATGGTATACATTACGTATCGGGTGTCGAACCCCCTACCACTT',
        s'CCGAACCATTCCTAGACTTGCATCGAAGACGCCGGAGACATAGAGTATACTATTTCG',
        s'CAATAAAGGAAGATCGACCCAGTTGCTAGGCCCGGCGCTTCCCTGGAGCCTTGGTGAA',
        s'AAATGGAGCCAGACAGCGTGACGCCCTGCGCGCGACAAGCTACGTCGAAGGCACATTCT',
        s'CAATCTATGATTTTTGTCGGGTTGCGAGCCTAAGTTAACTTGATCTCCGTACGTGCCACA',
        s'CAACTACTGAGCTCCGTTAGGTCCCTTTCATTTCGCTGCGTATGTGTAACCAACCTCGTAC',
        s'TGGAGAGTCCCTTCCCACGCGCAACCTGCGGTTAGCATCGCAGATCTTTCTACAGCCCTATG',
        s'GATCCTAACCTTCTACACTCATCGAACACGAACATGATGCTGTGCGGTGTCATTTGGATTGTG',
        s'GTCATTACATAACCATGAGCGCCCCCGTTCAAACTTCAGCGTTTTTGTAAAGGGCATCATTGCC',
        s'GGGGCAAGCAGACGGATTACACACTCTTTTAACCTCGTTTCTACACTCCTAATCAGTCCGTACAG',
        s'CATGCGGTCCCCGCAGCCCAGATCCAATCCGGCAGCAGAAGGCATTATCTGCTGGCGTTGCCTTAC',
        s'TAAGTCGACCGAAGGATGCAAAAGGAATCCCCGACAGTATCTGTCACATCCCTGCAGCCGTCTATTT',
        s'GATGATCACCTAATGACCGTCGCGGGACCAATGGTATCCGAGTGATGGAATCCTACGATTGATCAACC',
        s'AAAGAATTTCCCAAAGTCCCACTTGTTAATACCGTGACGCAGCCGGACTAACACAGTCCCAGGTATTGA',
        s'ATCGTTTATGTAGATCACGGCATATCTCTAACTAACGGCATAGTACCGGCATGCAGTTGAGCAGACTGGG',
        s'AGACTCTGGCATATCTGTCCATACCCATAAGCCGGCCCACGCAGGATCAGGAGTGAATTGCCGCGCAGATC',
        s'CTGGAGCCATGAATATAGCATCCCAACCCAACGTTTGAGTGTCTCCAGCGGAATAAAACGCCTAATTTTTGG',
        s'TTTAAGCCACCTGTCATTAGATATATCGCGCCCGCCACTTACATCTACCTGTTCATAGAGACTATGCGTACTA',
        s'CTCACATCTCTATCGATTTAGGTAGAGGCTAGCGGTCATAAATCTAAGTCTAGTCAGCCCGCAACGCCACATCG',
        s'TACAGCCCGTGCAGTGTACAAGCGCACACGGGAGCATCCTGGGTTATGAGCCCCCCGAGGCCAGTGCAAGACCAG',
        s'GTCTCTTGGCAGTGTCCAGACAGACGCGGTGCCTGGGAAGACGTTAATTGGTGCTACTTCAACCACGCCTTGCTTG',
        s'GGGGCTATTTGGGATTAGAGAAGTGCCTACACTCGGTGGCCCAGCTGGGCTGTCCATTGCAGACACGCGTCGCGTGT',
        s'CAGGAGTATGGACCCAACATGACTTTGGCGGCAGCAGTATCCATGCCCGTTGCCTGTAGTCTTTAGGAGGATCGTAAT',
        s'CGCGGTGTACCGTTTCAGATTCTATCTACTACGACTAGGTGCTTAGCAATTACCAATCGTACGCGACCGATATAAAACT',
        s'CGCCAGGGGTCATCCCGGGGATTCCATCAGTTAAACGTCTTGAAACCAGTTAGAGAACAGAGACCAGTTAGGCAACTCGG',
        s'TTCCCGCTTCTCTGCCCGATACCCAATTCTTGATACGTAGTCTCCCTACCGCAGGATATGACGCACGCCCCTATAACGAAC',
        s'AGCTACCACATACACAGGGAGACCGCGCGGTTTTGACCGTATGGTCAACCCATCTTCTAAGTTGCAGCGTCGAAGAGTCCCG',
        s'GGTAACGACGATGGGACAAAATGATAAATCACGTCGTACTTAGTTCACTTAGGTAAGGGTTTGGTGTGGCGTGAATAACTTGA',
        s'GTGCTCGAGGCAGCGACACGCGTTCATCAGATTGTGACAATGACCATATATTAGACGTCAGTTAAAGGAAGTTCACCGGTAACG',
        s'GTAAACTTCAGTTGCTAAAGTTAAATTCATCTGATGCTTACGTGGAAACTTGAGAAGGAGCCATTGAGACTTCGCTCCAGATAAC',
        s'CCGAATTCCGTTATCAACGTAAGCTAAGCGGCTTGGGCGTAGAGTTTCTAAGGGTGAACGTACACTTCTTTCGCTGCACCGATGCC',
        s'CCACTCCCTGATTAGCTTTGTTCTGTATTGCATGAATAAGGTTCAATTTGCGACCTTATGAAACAGGTAATCTGGGAAGCCTTAGTG',
        s'CATAAGTCCCAGATTCTCGCCGGATGGCAATTCTAGCGTCACGTTAGACAACGGTGAGAACGGAGGAGATTCAGAGCACAGGCTTGAA',
        s'AAGCTTTAGAGATCCAGGACCTTATGTCGGTACAAGAAACTAGAACTCGCTAAGTAGATCAGGTCCTGGCAGCATCCATGCCCCATTTG',
        s'TACTTATTACCACCTTTGTTGGGCTTTGACAGATATTACAGTGGTCTGATTCGTGGGGGCTTACTGCAACGCATACTATGGCGAAGGTCC',
        s'GGCAAGCTGAGGAGGGACGGTCACCCACTGAAAACATTTGAAACCGGGCGGGCTTGAACAGGGCCAATCAAGACCCCTCTCATAGGATGGC',
        s'CCATGCGAATTTTCCGGTCAAGGAACACCTGATTCAGAGCGGGCTACCAGAACAGGCAAGCAGCCCTACATCGCTTCTTAAAAAATATTAAG',
        s'TGGCTATGCATCTCACTTGGCTTTTCACGGGGGTGCCCAGAGGACATAGATACAGCACGGTCCCATGCTAGGATCCAACGAGTGCATTAGAAT',
        s'CTAAGCCTATGCCAGTCTTCCTTGTTTACTCGGTGGTCCTGTACGTCCATATCATTTACGTCCATGAAGCCAACCCCCGAGCAAATACCCGGTA',
        s'GATAAATTCCTCCCATATCAAAGTTCTTGCCCACGCGGGCTACCCAGCTAACGTAACTGTTTCGACACTAGAGATAACAACGCGTTGCGACTCTC',
        s'GGCGGCATGTAGGACGGCGTCAGTGGGTATACTATCGCTCTTAGGTCTCCAGTCAAAAAAATGTGGCATCCGGTAGTTGCTGGCAGATCTGCACTT',
        s'ATTTATTTGCCCCGCAGTGTCCTTTTTCTAGTCATAAATCCTCATACCGCGGGCCCTTCATCCGGTTTGATTCGAAGCATTGGTATGTTAGATACGT',
        s'ACACGCCATGAGGTAAATAACTCTGGAATTGTCAGTCAAGCACCGTGTGTTCAGTGTAAGTTTCTCGGACCAAGGCATATCGACGCTATGCGGTTTAT',
        s'AACCTCAGTCGGGCAGGCCATGGCGCGAAATGACTCGAGTAGACTCCATCTCTAAGGAGCGGAGCTGTTGCAACTAGGGTGACACACAGCTCGCCATGA',
        s'TATTGCAAGGCCCTACGCGGCTACGTCTCAATATATCCTATGGGCCGCAGCGTTCGGCCAATTCACATGGATGAGACATGGGTCCAAAATTTGCGGGATA'   ]

test_all[Kmer[1]](v)
test_all[Kmer[2]](v)
test_all[Kmer[3]](v)
test_all[Kmer[4]](v)
test_all[Kmer[5]](v)
test_all[Kmer[6]](v)
test_all[Kmer[7]](v)
test_all[Kmer[8]](v)
test_all[Kmer[9]](v)
test_all[Kmer[10]](v)
test_all[Kmer[11]](v)
test_all[Kmer[12]](v)
test_all[Kmer[13]](v)
test_all[Kmer[14]](v)
test_all[Kmer[15]](v)
test_all[Kmer[16]](v)
test_all[Kmer[17]](v)
test_all[Kmer[18]](v)
test_all[Kmer[19]](v)
test_all[Kmer[20]](v)
