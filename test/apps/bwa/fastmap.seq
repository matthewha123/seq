from sys import argv, stderr, exit
from time import timing
from bio.fmindex import FMIndex, SMEM, FMDInterval

min_seed   = 17
min_iwidth = 20
min_intv   = 1

def open_index_file(basename: str, mode: str):
    import gzip
    return gzip.open(f'{basename}.fastmap.idx', mode)

def index_load(basename: str):
    from pickle import load
    with open_index_file(basename, 'rb') as jar:
        return load[FMIndex](jar)

@prefetch
def fastmap(rec: FASTQRecord, fmi: FMIndex, out: File):
    prev = list[SMEM]()
    curr = list[SMEM]()
    mems = list[SMEM]()
    q = rec.seq
    l = len(q)

    start = 0
    while True:
        while start < l and q[start].N():
            start += 1
        if start >= l:
            break

        mems.clear()
        prev.clear()
        curr.clear()
        x = start

        if q[x].N():
            return x + 1, mems

        ik = SMEM(fmi.biinterval(q[x]), start=x, stop=x+1)

        # forward search
        i = x + 1
        while i < l:
            if not q[i].N():  # an A/C/G/T base
                ok = ~fmi[~(ik.interval), ~q[i]]
                if len(ok) != len(ik.interval):  # change of the interval size
                    curr.append(ik)
                    if len(ok) < min_intv:
                        break  # the interval size is too small to be extended further
                ik = SMEM(ok, start=x, stop=i+1)
            else:  # an ambiguous base
                curr.append(ik)
                break
            i += 1

        if i == l:
            curr.append(ik)
        curr.reverse()
        ret = curr[0].stop
        prev, curr = curr, prev

        # backward search for MEMs
        i = x - 1
        while i >= -1:
            c = i >= 0 and not q[i].N()
            curr.clear()
            for p in prev:
                ok = FMDInterval()
                if c:
                    ok = fmi[p.interval, q[i]]
                if not c or len(ok) < min_intv:
                    if len(curr) == 0:
                        if len(mems) == 0 or i + 1 < mems[-1].start:
                            ik = SMEM(p.interval, start=i+1, stop=p.stop)
                            if len(ik) >= min_seed:
                                mems.append(ik)
                elif len(curr) == 0 or len(ok) != len(curr[-1].interval):
                    curr.append(SMEM(ok, start=p.start, stop=p.stop))
            if len(curr) == 0:
                break
            prev, curr = curr, prev
            i -= 1

        mems.reverse()  # s.t. sorted by the start coordinate
        start = ret

        for mem in mems:
            intv = mem.interval
            offset = mem.start
            match_size = len(mem)

            out.write(rec.name)
            out.write('\tEM\t')
            out.write(str(offset))
            out.write('\t')
            out.write(str(offset + match_size))
            out.write('\t')
            out.write(str(len(intv)))
            if len(intv) <= min_iwidth:
                for rid, name, pos, is_rev in fmi.biresults(mem):
                    out.write('\t')
                    out.write(name)
                    out.write(':-' if is_rev else ':+')
                    out.write(str(pos + 1))
            else:
                out.write('\t*\n')
            out.write('\n')

def main_index():
    from pickle import dump
    stderr.write('building FM-index...\n')
    fmi = FMIndex(argv[2], FMD=True)
    stderr.write('writing to disk...\n')
    with open_index_file(argv[2], 'wb0') as jar:
        dump(fmi, jar)

def main_search():
    stderr.write('loading index...\n')
    fmi = index_load(argv[2])
    stderr.write('running alignment pipeline...\n')
    with open(argv[4], 'w') as out, timing('fastmap'):
        FASTQ(argv[3]) |> iter |> fastmap(fmi, out)

mode = argv[1]
match mode:
    case 'index':
        main_index()
    case 'search':
        main_search()
    case _:
        stderr.write("error: unknown mode: valid modes are 'index' and 'search'\n")
        exit(1)
