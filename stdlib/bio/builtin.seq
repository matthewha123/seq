@builtin
def seqs(x):
    return x.__seqs__()

@builtin
def split(self: seq, k: int, step: int):
    return self.split(k, step)

@builtin
def kmers[K](self: seq, step: int):
    return self.kmers[K](step)

@builtin
def kmers_with_pos[K](self: seq, step: int):
    return self.kmers_with_pos[K](step)

@builtin
def revcomp(s):
    return ~s

@builtin
def revcomp_with_pos(t):
    return (t[0], ~t[1])

@builtin
def _kmers_revcomp_with_pos[K](self: seq, step: int):
    return self._kmers_revcomp_with_pos[K](step)

@builtin
def _kmers_revcomp[K](self: seq, step: int):
    return self._kmers_revcomp[K](step)

@builtin
def canonical(k):
    kr = ~k
    return k if k < kr else kr

@builtin
def canonical_with_pos(t):
    return (t[0], canonical(t[1]))

@builtin
def _kmers_canonical[K](self: seq):
    return self.kmers_canonical[K]()

@builtin
def _kmers_canonical_with_pos[K](self: seq):
    return self.kmers_canonical_with_pos[K]()

@builtin
def _kmer_in_seq[K](kmer: K, s: seq) -> bool:
    for k in s.kmers[K](step=1):
        if k == kmer:
            return True
    return False

@builtin
def base[K,T](kmer: K, idx: int, b: T):
    type U = typeof(kmer.as_int())
    if idx < 0:
        idx += len(kmer)
    idx = K.len() - idx - 1
    n = U(int(Kmer[1](b).as_int()))
    k = kmer.as_int() & ~(U(3) << U(2*idx))
    k |= n << U(2*idx)
    return K(k)

@builtin
def _is_iupac_nt(b: byte) -> bool:
    iupac = ('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x01\x01\x01\x01\x00\x00\x01\x01\x00\x00\x01\x00\x01\x01\x00'
             '\x00\x00\x01\x01\x01\x01\x01\x01\x00\x01\x00\x00\x00\x00\x00\x00'
             '\x00\x01\x01\x01\x01\x00\x00\x01\x01\x00\x00\x01\x00\x01\x01\x00'
             '\x00\x00\x01\x01\x01\x01\x01\x01\x00\x01\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
    return bool(iupac.ptr[int(b)])

@builtin
def _is_iupac_aa(b: byte) -> bool:
    iupac = ('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x01\x00\x01\x01\x01\x01\x01\x01\x01\x00\x01\x01\x01\x01\x00'
             '\x01\x01\x01\x01\x01\x00\x01\x01\x00\x01\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
    return bool(iupac.ptr[int(b)])

@builtin
def _validate_str_as_seq(s: str, copy: bool = False):
    def ensure_valid(b: byte, i: int):
        if not _is_iupac_nt(b):
            raise ValueError(f"invalid base {repr(b)} at position {i} of sequence")
    p = s.ptr
    n = s.len
    i = 0
    if copy:
        q = ptr[byte](n)
        while i < n:
            b = p[i]
            ensure_valid(b, i)
            q[i] = b
            i += 1
        return seq(q, n)
    else:
        while i < n:
            ensure_valid(p[i], i)
            i += 1
        return seq(p, n)

@builtin
def _validate_str_as_qual(s: str, copy: bool = False):
    def ensure_valid(b: byte, i: int):
        if not (byte(0x21) <= b <= byte(0x7e)):
            raise ValueError(f"invalid quality score {repr(b)} at position {i} of quality score string")
    p = s.ptr
    n = s.len
    i = 0
    if copy:
        q = ptr[byte](n)
        while i < n:
            b = p[i]
            ensure_valid(b, i)
            q[i] = b
            i += 1
        return str(q, n)
    else:
        while i < n:
            ensure_valid(p[i], i)
            i += 1
        return str(p, n)

@builtin
def _split_header_on_space(s: str):
    a = 0
    while a < len(s) and not s[a].isspace():
        a += 1

    b = a
    while b < len(s) and s[b].isspace():
        b += 1

    return s[:a], s[b:]
