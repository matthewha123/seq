from core.c_stubs import CIGAR, Alignment, pseq

# adapted from ksw2:
_ALIGN_SCORE_NEG_INF = -0x40000000
_ALIGN_SCORE_ONLY    = 0x01
_ALIGN_RIGHT         = 0x02
_ALIGN_GENERIC_SC    = 0x04
_ALIGN_APPROX_MAX    = 0x08
_ALIGN_APPROX_DROP   = 0x10
_ALIGN_EXTZ_ONLY     = 0x40
_ALIGN_REV_CIGAR     = 0x80
_ALIGN_SPLICE_FOR    = 0x100
_ALIGN_SPLICE_REV    = 0x200
_ALIGN_SPLICE_FLANK  = 0x400

_ALIGN_KIND_REGULAR = 0
_ALIGN_KIND_DUAL    = 1
_ALIGN_KIND_SPLICE  = 2
_ALIGN_KIND_GLOBAL  = 3

type SubMat(mat: ptr[i8]):
    def _N():
        return 23

    def __init__(self: SubMat, d: dict[tuple[str, str], int]) -> SubMat:
        def aa_code(c: str):
            if len(c) != 1:
                raise ValueError("sequence length != 1: " + c)
            AA = 'ABCDEFGHIKLMNPQRSTVWXYZ'
            assert len(AA) == SubMat._N()
            b = c.ptr[0]
            i = 0
            while i < len(AA):
                if b == AA.ptr[i]:
                    return i
                i += 1
            raise ValueError("unknown amino acid code: " + c)

        N = SubMat._N()
        p = ptr[i8](N * N)
        for i in range(N * N):
            p[i] = i8(0)
        for k,v in d.items():
            if not (-128 <= v <= 127):
                raise ValueError("substitution score out of [-128, 127] range: " + str(v))
            a1 = aa_code(k[0])
            a2 = aa_code(k[1])
            p[a1*N + a2] = i8(v)
            p[a2*N + a1] = i8(v)
        return (p,)

    def __str__(self: SubMat):
        N = SubMat._N()
        s = []
        k = 0
        for i in range(N):
            for j in range(N):
                s.append(str(int(self.mat[k])) + ' ')
                k += 1
        return ''.join(s)

extend CIGAR:
    def __init__(self: CIGAR) -> CIGAR:
        return (ptr[u32](), 0)

    def __len__(self: CIGAR):
        return self.len

    def __copy__(self: CIGAR) -> CIGAR:
        p = ptr[u32](self.len)
        str.memcpy(ptr[byte](p), ptr[byte](self.value), self.len * _gc.sizeof[u32]())
        return CIGAR(p, self.len)

    def __bool__(self: CIGAR):
        return self.len > 0

    def __init__(self: CIGAR, cigar: str) -> CIGAR:
        ops = list[int]()
        d = 0
        for c in cigar:
            if c.isdigit():
                d = 10 * d + ord(c) - ord('0')
            elif c in "MIDNSHP=XB":
                if d == 0:
                    raise ValueError(f"cigar op {repr(c)} in string {repr(cigar)} has no count or count zero")
                ops.append((d << 4) | "MIDNSHP=XB".find(c))
                d = 0
            else:
                raise ValueError(f"invalid CIGAR string {repr(cigar)}: unexpected {repr(c)}")
        if d != 0:
            raise ValueError(f"unclosed cigar op in string {repr(cigar)}")
        p = ptr[u32](len(ops))
        for i, o in enumerate(ops):
            p[i] = u32(o)
        return (p, len(ops))

    @property
    def qlen(self: CIGAR):
        return _C.bam_cigar2qlen(self.len, self.value)

    @property
    def rlen(self: CIGAR):
        return _C.bam_cigar2rlen(self.len, self.value)

    def __getitem__(self: CIGAR, idx: int):
        if not (0 <= idx < len(self)):
            raise IndexError("CIGAR index out of range")
        v = self.value[idx]
        return (int(v) >> 4, "MIDNSHP=XB"[int(v) & 0xf])

    def __iter__(self: CIGAR):
        for i in range(len(self)):
            yield self[i]

    def __str__(self: CIGAR):
        v = list[str](len(self) * 2)
        for op in self:
            v.append(str(op[0]))
            v.append(str(op[1]))
        return str.cat(v)

extend Alignment:
    def __init__(self: Alignment) -> Alignment:
        return (CIGAR(), 0)

    @property
    def cigar(self: Alignment):
        return self._cigar

    @property
    def score(self: Alignment):
        return self._score

    def __bool__(self: Alignment):
        return self._score != _ALIGN_SCORE_NEG_INF

def _validate_match(m: int):
    if m < 0 or m >= 128:
        raise ValueError("match/mismatch penalty for alignment must be in range [0, 127]")

def _validate_gap(g: int):
    if g < 0 or g >= 128:
        raise ValueError("gap penalty for alignment must be in range [0, 127]")

extend seq:
    @builtin
    def align(self: seq,
              other: seq,
              a: int = 2,
              b: int = 4,
              ambig: int = 0,
              gapo: int = 4,
              gape: int = 2,
              gapo2: int = -1,
              gape2: int = -1,
              bandwidth: int = -1,
              zdrop: int = -1,
              end_bonus: int = 0,
              score_only: bool = False,
              right: bool = False,
              generic_sc: bool = False,
              approx_max: bool = False,
              approx_drop: bool = False,
              ext_only: bool = False,
              rev_cigar: bool = False,
              splice: bool = False,
              splice_fwd: bool = False,
              splice_rev: bool = False,
              splice_flank: bool = False,
              glob: bool = False):

        # validate args
        _validate_match(a)
        _validate_match(b)
        _validate_match(ambig)
        _validate_gap(gapo)
        _validate_gap(gape)

        if splice:
            if bandwidth >= 0:
                raise ValueError("bandwidth cannot be specified for splice alignment")
            if end_bonus != 0:
                raise ValueError("end_bonus cannot be specified for splice alignment")
            if glob:
                raise ValueError("global alignment cannot be done with splice alignment")
        elif (splice_fwd or splice_rev or splice_flank):
            raise ValueError("splice flags require 'splice' argument be set to True")

        if (gapo2 < 0) ^ (gape2 < 0):
            raise ValueError("dual gap o/e costs must both be given or both be omitted")
        dual = (gapo2 >= 0)
        if dual:
            _validate_gap(gapo2)
            _validate_gap(gape2)

        if glob:
            if dual:
                raise ValueError("dual gap costs cannot be specified for global alignment")
            if end_bonus != 0:
                raise ValueError("end_bonus cannot be specified for global alignment")

        mat = __array__[i8](25)
        mat[0]  = i8(a)
        mat[1]  = i8(-b)
        mat[2]  = i8(-b)
        mat[3]  = i8(-b)
        mat[4]  = i8(ambig)
        mat[5]  = i8(-b)
        mat[6]  = i8(a)
        mat[7]  = i8(-b)
        mat[8]  = i8(-b)
        mat[9]  = i8(ambig)
        mat[10] = i8(-b)
        mat[11] = i8(-b)
        mat[12] = i8(a)
        mat[13] = i8(-b)
        mat[14] = i8(ambig)
        mat[15] = i8(-b)
        mat[16] = i8(-b)
        mat[17] = i8(-b)
        mat[18] = i8(a)
        mat[19] = i8(ambig)
        mat[20] = i8(ambig)
        mat[21] = i8(ambig)
        mat[22] = i8(ambig)
        mat[23] = i8(ambig)
        mat[24] = i8(ambig)

        flags = 0
        if score_only:
            flags |= _ALIGN_SCORE_ONLY
        if right:
            flags |= _ALIGN_RIGHT
        if generic_sc:
            flags |= _ALIGN_GENERIC_SC
        if approx_max:
            flags |= _ALIGN_APPROX_MAX
        if approx_drop:
            flags |= _ALIGN_APPROX_DROP
        if splice_fwd:
            flags |= _ALIGN_SPLICE_FOR
        if splice_rev:
            flags |= _ALIGN_SPLICE_REV
        if splice_flank:
            flags |= _ALIGN_SPLICE_FLANK

        kind = _ALIGN_KIND_REGULAR
        if splice:
            kind = _ALIGN_KIND_SPLICE
        elif dual:
            kind = _ALIGN_KIND_DUAL
        elif glob:
            kind = _ALIGN_KIND_GLOBAL

        out = Alignment()
        if kind == _ALIGN_KIND_REGULAR:
            _C.seq_align(self, other, mat.ptr, i8(gapo), i8(gape), bandwidth, zdrop, end_bonus, flags, __ptr__(out))
        elif kind == _ALIGN_KIND_DUAL:
            _C.seq_align_dual(self, other, mat.ptr, i8(gapo), i8(gape), i8(gapo2), i8(gape2), bandwidth, zdrop, end_bonus, flags, __ptr__(out))
        elif kind == _ALIGN_KIND_SPLICE:
            _C.seq_align_splice(self, other, mat.ptr, i8(gapo), i8(gape), i8(gapo2), i8(gape2), zdrop, flags, __ptr__(out))
        elif kind == _ALIGN_KIND_GLOBAL:
            _C.seq_align_global(self, other, mat.ptr, i8(gapo), i8(gape), bandwidth, __ptr__(out))
        else:
            assert False
        return out

    def __matmul__(self: seq, other: seq):
        out = Alignment()
        _C.seq_align_default(self, other, __ptr__(out))
        return out

extend pseq:
    def align(self: pseq,
              other: pseq,
              mat: SubMat,
              gapo: int = 4,
              gape: int = 2,
              gapo2: int = -1,
              gape2: int = -1,
              bandwidth: int = -1,
              zdrop: int = -1,
              end_bonus: int = 0,
              score_only: bool = False,
              right: bool = False,
              generic_sc: bool = False,
              approx_max: bool = False,
              approx_drop: bool = False,
              ext_only: bool = False,
              rev_cigar: bool = False,
              glob: bool = False):

        # validate args
        _validate_gap(gapo)
        _validate_gap(gape)

        if (gapo2 < 0) ^ (gape2 < 0):
            raise ValueError("dual gap o/e costs must both be given or both be omitted")
        dual = (gapo2 >= 0)
        if dual:
            _validate_gap(gapo2)
            _validate_gap(gape2)

        if glob:
            if dual:
                raise ValueError("dual gap costs cannot be specified for global alignment")
            if end_bonus != 0:
                raise ValueError("end_bonus cannot be specified for global alignment")

        flags = 0
        if score_only:
            flags |= _ALIGN_SCORE_ONLY
        if right:
            flags |= _ALIGN_RIGHT
        if generic_sc:
            flags |= _ALIGN_GENERIC_SC
        if approx_max:
            flags |= _ALIGN_APPROX_MAX
        if approx_drop:
            flags |= _ALIGN_APPROX_DROP

        kind = _ALIGN_KIND_REGULAR
        if dual:
            kind = _ALIGN_KIND_DUAL
        elif glob:
            kind = _ALIGN_KIND_GLOBAL

        out = Alignment()
        if kind == _ALIGN_KIND_REGULAR:
            _C.seq_palign(self, other, mat.mat, i8(gapo), i8(gape), bandwidth, zdrop, end_bonus, flags, __ptr__(out))
        elif kind == _ALIGN_KIND_DUAL:
            _C.seq_palign_dual(self, other, mat.mat, i8(gapo), i8(gape), i8(gapo2), i8(gape2), bandwidth, zdrop, end_bonus, flags, __ptr__(out))
        elif kind == _ALIGN_KIND_GLOBAL:
            _C.seq_palign_global(self, other, mat.mat, i8(gapo), i8(gape), bandwidth, __ptr__(out))
        else:
            assert False
        return out

    def __matmul__(self: pseq, other: pseq):
        out = Alignment()
        _C.seq_palign_default(self, other, __ptr__(out))
        return out

# inter-sequence alignment
# much of what follows is adapted from BWA-MEM2 (https://github.com/bwa-mem2/bwa-mem2)
type InterAlignParams(a: i8, b: i8, ambig: i8, gapo: i8, gape: i8, bandwidth: i8, zdrop: i8, end_bonus: i8)

_MAX_SEQ_LEN_REF = 256
_MAX_SEQ_LEN_QER = 128
_MAX_SEQ_LEN8    = 128
_MAX_SEQ_LEN16   = 32768

type SeqPair(
    idr: i32, idq: i32, id: i32,
    len1: i32, len2: i32,
    h0: i32,
    seqid: i32, regid: i32,
    score: i32, tle: i32, gtle: i32, qle: i32,
    gscore: i32, max_off: i32):

    def __init__(self: SeqPair, id: int, len1: int, len2: int) -> SeqPair:
        return (i32(id * _MAX_SEQ_LEN_REF), i32(id * _MAX_SEQ_LEN_QER),
                i32(id), i32(len1), i32(len2), i32(10), i32(-1), i32(-1),
                i32(-1), i32(-1), i32(-1), i32(-1), i32(-1), i32(-1))

@builtin
@inline
def _interaln_add_to_buf(s: seq, buf: ptr[byte], step: int, idx: int):
    n = len(s)
    if len(s) > step:
        raise ValueError(f"sequence too long for inter-sequence alignment (len={n}, max={step})")
    if s.len >= 0:
        str.memcpy(buf + (idx * step), s.ptr, n)
    else:
        i = n - 1
        while i >= 0:
            buf[(idx * step) + (n - i - 1)] = s.ptr[i].comp()
            i -= 1

def _interaln_max(a: i32, b: i32) -> i32:
    return a if a > b else b

def _interaln_min(a: i32, b: i32) -> i32:
    return a if a < b else b

@builtin
@inline
def _interaln_sort_pairs_len_ext(pairs_array: ptr[SeqPair], tmp_array: ptr[SeqPair], count: int, hist: ptr[i32]) -> tuple[int,int,int]:
    num_pairs128 = 0
    num_pairs16  = 0
    num_pairs1   = 0
    str.memset(ptr[byte](hist), byte(0), (_MAX_SEQ_LEN8 + _MAX_SEQ_LEN16 + 1) * _gc.sizeof[i32]())

    hist2 = hist + _MAX_SEQ_LEN8
    hist3 = hist + (_MAX_SEQ_LEN8 + _MAX_SEQ_LEN16)

    i = 0
    while i < count:
        sp = pairs_array[i]
        val = _interaln_max(sp.len1, sp.len2)
        minval = sp.h0 + _interaln_min(sp.len1, sp.len2)
        if val < i32(_MAX_SEQ_LEN8) and minval < i32(_MAX_SEQ_LEN8):
            hist[int(minval)] += i32(1)
        elif val < i32(_MAX_SEQ_LEN16) and minval < i32(_MAX_SEQ_LEN16):
            hist2[int(minval)] += i32(1)
        else:
            hist3[0] += i32(1)
        i += 1

    cumul_sum = i32(0)
    i = 0
    while i < _MAX_SEQ_LEN8:
        cur = hist[i]
        hist[i] = cumul_sum
        cumul_sum += cur
        i += 1

    i = 0
    while i < _MAX_SEQ_LEN16:
        cur = hist2[i]
        hist2[i] = cumul_sum
        cumul_sum += cur
        i += 1

    hist3[0] = cumul_sum

    i = 0
    while i < count:
        sp = pairs_array[i]
        val = _interaln_max(sp.len1, sp.len2)
        minval = sp.h0 + _interaln_min(sp.len1, sp.len2)

        if val < i32(_MAX_SEQ_LEN8) and minval < i32(_MAX_SEQ_LEN8):
            pos = int(hist[int(minval)])
            tmp_array[pos] = sp
            hist[int(minval)] += i32(1)
            num_pairs128 += 1
        elif val < i32(_MAX_SEQ_LEN16) and minval < i32(_MAX_SEQ_LEN16):
            pos = int(hist2[int(minval)])
            tmp_array[pos] = sp
            hist2[int(minval)] += i32(1)
            num_pairs16 += 1
        else:
            pos = int(hist3[0])
            tmp_array[pos] = sp
            hist3[0] += i32(1)
            num_pairs1 += 1

        i += 1

    i = 0
    while i < count:
        pairs_array[i] = tmp_array[i]
        i += 1

    return num_pairs128, num_pairs16, num_pairs1

@builtin
@inline
def _interaln_queue(coro: generator[tuple[seq,seq,int]],
                    pairs_array: ptr[SeqPair],
                    seq_buf_ref: ptr[byte],
                    seq_buf_qer: ptr[byte],
                    pending: ptr[generator[tuple[seq,seq,int]]],
                    m: int) -> int:
    coro.__resume__()  # resume coro to get next sequence to align
    if not coro.__done__():
        t, s, _ = coro.__promise__()[0]  # coro yields seqs to align
        pending[m] = coro
        pairs_array[m] = SeqPair(m, len(s), len(t))
        _interaln_add_to_buf(s, seq_buf_ref, _MAX_SEQ_LEN_REF, m)
        _interaln_add_to_buf(t, seq_buf_qer, _MAX_SEQ_LEN_QER, m)
        m += 1
    return m

@builtin
@inline
def _interaln_flush(pairs_array: ptr[SeqPair],
                    seq_buf_ref: ptr[byte],
                    seq_buf_qer: ptr[byte],
                    pending: ptr[generator[tuple[seq,seq,int]]],
                    m: int,
                    params: InterAlignParams,
                    hist: ptr[i32],
                    tmp_array: ptr[SeqPair],
                    tmp_pending: ptr[generator[tuple[seq,seq,int]]]) -> int:
    cimport seq_inter_align128(ptr[InterAlignParams], ptr[SeqPair], ptr[byte], ptr[byte], int)
    cimport seq_inter_align16(ptr[InterAlignParams], ptr[SeqPair], ptr[byte], ptr[byte], int)
    cimport seq_inter_align1(ptr[InterAlignParams], ptr[SeqPair], ptr[byte], ptr[byte], int)
    num_pairs128, num_pairs16, num_pairs1 = _interaln_sort_pairs_len_ext(pairs_array, tmp_array, m, hist)

    if num_pairs128 > 0:
        seq_inter_align128(__ptr__(params), pairs_array, seq_buf_ref, seq_buf_qer, num_pairs128)
    if num_pairs16 > 0:
        seq_inter_align16(__ptr__(params), pairs_array + num_pairs128, seq_buf_ref, seq_buf_qer, num_pairs16)
    if num_pairs1 > 0:
        seq_inter_align1(__ptr__(params), pairs_array + (num_pairs128 + num_pairs16), seq_buf_ref, seq_buf_qer, num_pairs1)

    i = 0
    j = 0
    while i < m:
        sp = pairs_array[i]
        coro = pending[int(tmp_array[i].id)]  # alignment kernel may overwrite IDs, so read from temp array
        score = int(sp.gscore - sp.h0)
        coro.__promise__()[0] = (s'', s'', int(score))
        # coro.__resume__()  # resume coro; have it wait to get score back -- (!) not needed with no-suspend yield-expression
        j = _interaln_queue(coro, pairs_array, seq_buf_ref, seq_buf_qer, tmp_pending, j)
        i += 1
    m = j
    str.memcpy(ptr[byte](pending), ptr[byte](tmp_pending), m * _gc.sizeof[generator[tuple[seq,seq,int]]]())
    str.memset(ptr[byte](tmp_pending), byte(0), m * _gc.sizeof[generator[tuple[seq,seq,int]]]())
    return m

@builtin
@inline
def _interaln_realign(query: seq, target: seq, score: int, params: InterAlignParams) -> Alignment:
    if score >= 0:
        return (CIGAR(), score)
    a = int(params.a)
    b = int(params.b)
    ambig = int(params.ambig)
    gapo = int(params.gapo)
    gape = int(params.gape)
    bandwidth = int(params.bandwidth)
    zdrop = int(params.zdrop)
    end_bonus = int(params.end_bonus)
    return query.align(target, a=a, b=b, ambig=ambig, gapo=gapo, gape=gape, bandwidth=bandwidth, zdrop=zdrop, end_bonus=end_bonus, score_only=True)
