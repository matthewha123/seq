# Suffix array and BWT construction
# Adapted from https://github.com/bwa-mem2/bwa-mem2/blob/master/src/sais.h
# Original implementation by Yuta Mori for sais-lite

def _get_counts[X](T: ptr[X], C: ptr[int], n: int, k: int):
    i = 0
    while i < k:
        C[i] = 0
        i += 1
    i = 0
    while i < n:
        C[int(T[i])] += 1
        i += 1

def _get_buckets(C: ptr[int], B: ptr[int], k: int, end: bool):
    sum = 0
    i = 0
    if end:
        while i < k:
            sum += C[i]
            B[i] = sum
            i += 1
    else:
        while i < k:
            sum += C[i]
            B[i] = sum - C[i]
            i += 1

def _LMS_sort1[X](T: ptr[X], SA: ptr[int], C: ptr[int], B: ptr[int], n: int, k: int, recount: bool):
    # compute SAl
    if recount:
        _get_counts(T, C, n, k)
    _get_buckets(C, B, k, False)  # find starts of buckets
    j = n - 1
    c1 = T[j]
    b = SA + B[int(c1)]
    j -= 1
    b[0] = ~j if T[j] < c1 else j
    b += 1
    i = 0
    while i < n:
        j = SA[i]
        if 0 < j:
            assert T[j] >= T[j + 1]
            c0 = T[j]
            if c0 != c1:
                B[int(c1)] = b - SA
                c1 = c0
                b = SA + B[int(c1)]
            assert i < b - SA
            j -= 1
            b[0] = ~j if T[j] < c1 else j
            b += 1
            SA[i] = 0
        elif j < 0:
            SA[i] = ~j
        i += 1

    # compute SAs
    if recount:
        _get_counts(T, C, n, k)
    _get_buckets(C, B, k, True)  # find ends of buckets
    i = n - 1
    c1 = X(0)
    b = SA + B[int(c1)]
    while i >= 0:
        j = SA[i]
        if j > 0:
            assert T[j] <= T[j + 1]
            c0 = T[j]
            if c0 != c1:
                B[int(c1)] = b - SA
                c1 = c0
                b = SA + B[int(c1)]
            assert b - SA <= i
            j -= 1
            b += -1
            b[0] = ~(j + 1) if T[j] > c1 else j
            SA[i] = 0
        i -= 1

def _LMS_post_proc1[X](T: ptr[X], SA: ptr[int], n: int, m: int):
    assert n > 0
    i = 0
    while SA[i] < 0:
        p = SA[i]
        SA[i] = ~p
        assert i + 1 < n
        i += 1
    if i < m:
        j = i
        i += 1
        while True:
            assert i < n
            p = SA[i]
            if p < 0:
                SA[j] = ~p
                j += 1
                SA[i] = 0
                if j == m:
                    break
            i += 1

    # store the length of all substrings
    i = n - 1
    j = n - 1
    c0 = T[n - 1]
    while True:
        c1 = c0
        i -= 1
        if i < 0:
            break
        c0 = T[i]
        if c0 < c1:
            break
    while i >= 0:
        while True:
            c1 = c0
            i -= 1
            if i < 0:
                break
            c0 = T[i]
            if c0 > c1:
                break
        if i >= 0:
            SA[m + ((i + 1) >> 1)] = j - i
            j = i + 1
            while True:
                c1 = c0
                i -= 1
                if i < 0:
                    break
                c0 = T[i]
                if c0 < c1:
                    break

    # find the lexicographic names of all substrings
    i = 0
    name = 0
    q = n
    qlen = 0
    while i < m:
        p = SA[i]
        plen = SA[m + (p >> 1)]
        diff = True
        if plen == qlen and q + plen < n:
            j = 0
            while j < plen and T[p + j] == T[q + j]:
                j += 1
            if j == plen:
                diff = False
        if diff:
            name += 1
            q = p
            qlen = plen
        SA[m + (p >> 1)] = name
        i += 1

    return name

def _LMS_sort2[X](T: ptr[X], SA: ptr[int], C: ptr[int], B: ptr[int], D: ptr[int], n: int, k: int):
    # compute SAl
    _get_buckets(C, B, k, False)  # find starts of buckets
    j = n - 1
    c1 = T[j]
    b = SA + B[int(c1)]
    j -= 1
    t = 1 if (T[j] < c1) else 0
    j += n
    b[0] = ~j if (t & 1) else j
    b += 1
    i = 0
    d = 0
    while i < n:
        j = int(SA[i])
        if 0 < j:
            if n <= j:
                d += 1
                j -= n
            assert T[j] >= T[j + 1]
            c0 = T[j]
            if c0 != c1:
                B[int(c1)] = b - SA
                c1 = c0
                b = SA + B[int(c1)]
            assert i < b - SA
            j -= 1
            t = int(c0)
            t = (t << 1) | (1 if T[j] < c1 else 0)
            if D[t] != d:
                j += n
                D[t] = d
            b[0] = ~j if (t & 1) else j
            b += 1
            SA[i] = 0
        elif j < 0:
            SA[i] = ~j
        i += 1
    i = n - 1
    while i >= 0:
        if SA[i] > 0 and SA[i] < n:
            SA[i] += n
            j = i - 1
            while SA[j] < n:
                j -= 1
            SA[j] -= n
            i = j
        i -= 1

    # compute SAs
    _get_buckets(C, B, k, True)  # find ends of buckets
    i = n - 1
    d += 1
    c1 = X(0)
    b = SA + B[int(c1)]
    while i >= 0:
        j = SA[i]
        if j > 0:
            if n <= j:
                d += 1
                j -= n
            assert T[j] <= T[j + 1]
            c0 = T[j]
            if c0 != c1:
                B[int(c1)] = b - SA
                c1 = c0
                b = SA + B[int(c1)]
            assert b - SA <= i
            j -= 1
            t = int(c0)
            t = (t << 1) | (1 if T[j] > c1 else 0)
            if D[t] != d:
                j += n
                D[t] = d
            b += -1
            b[0] = ~(j + 1) if (t & 1) else j
            SA[i] = 0
        i -= 1

def _LMS_post_proc2(SA: ptr[int], n: int, m: int):
    assert n > 0
    i = 0
    name = 0

    while SA[i] < 0:
        j = SA[i]
        j = ~j
        if n <= j:
            name += 1
        SA[i] = j
        assert i + 1 < n
        i += 1

    if i < m:
        d = i
        i += 1
        while True:
            assert i < n
            j = SA[i]
            if j < 0:
                j = ~j
                if n <= j:
                    name += 1
                SA[d] = j
                d += 1
                SA[i] = 0
                if d == m:
                    break
            i += 1

    if name < m:
        # store the lexicographic names
        i = m - 1
        d = name + 1
        while i >= 0:
            j = SA[i]
            if n <= j:
                j -= n
                d -= 1
            SA[m + (j >> 1)] = d
            i -= 1
    else:
        # unset flags
        i = 0
        while i < m:
            j = SA[i]
            if n <= j:
                j -= n
                SA[i] = j
            i += 1

    return name

def _induce_SA[X](T: ptr[X], SA: ptr[int], C: ptr[int], B: ptr[int], n: int, k: int, recount: bool):
    # compute SAl
    if recount:
        _get_counts(T, C, n, k)
    _get_buckets(C, B, k, False)  # find starts of buckets
    j = n - 1
    c1 = T[j]
    b = SA + B[int(c1)]
    b[0] = ~j if (0 < j and T[j - 1] < c1) else j
    b += 1
    i = 0
    while i < n:
        j = SA[i]
        SA[i] = ~j
        if j > 0:
            j -= 1
            c0 = T[j]
            if c0 != c1:
                B[int(c1)] = b - SA
                c1 = c0
                b = SA + B[int(c1)]
            b[0] = ~j if (0 < j and T[j - 1] < c1) else j
            b += 1
        i += 1

    # compute SAs
    if recount:
        _get_counts(T, C, n, k)
    _get_buckets(C, B, k, True)
    i = n - 1
    c1 = X(0)
    b = SA + B[int(c1)]
    while i >= 0:
        j = SA[i]
        if j > 0:
            j -= 1
            c0 = T[j]
            if c0 != c1:
                B[int(c1)] = b - SA
                c1 = c0
                b = SA + B[int(c1)]
            b += -1
            b[0] = ~j if (j == 0 or T[j - 1] > c1) else j
        else:
            SA[i] = ~j
        i -= 1

def _compute_bwt[X](T: ptr[X], SA: ptr[int], C: ptr[int], B: ptr[int], n: int, k: int, recount: bool):
    # compute SAl
    if recount:
        _get_counts(T, C, n, k)
    _get_buckets(C, B, k, False)  # find starts of buckets
    j = n - 1
    c1 = T[j]
    b = SA + B[int(c1)]
    b[0] = ~j if (0 < j and T[j - 1] < c1) else j
    b += 1
    i = 0
    while i < n:
        j = SA[i]
        if j > 0:
            j -= 1
            c0 = T[j]
            SA[i] = ~int(c0)
            if c0 != c1:
                B[int(c1)] = b - SA
                c1 = c0
                b = SA + B[int(c1)]
            b[0] = ~j if (0 < j and T[j - 1] < c1) else j
            b += 1
        elif j != 0:
            SA[i] = ~j
        i += 1

    # compute SAs
    if recount:
        _get_counts(T, C, n, k)
    _get_buckets(C, B, k, True)  # find ends of buckets
    i = n - 1
    c1 = X(0)
    b = SA + B[int(c1)]
    pidx = -1
    while i >= 0:
        j = SA[i]
        if j > 0:
            j -= 1
            c0 = T[j]
            SA[i] = int(c0)
            if c0 != c1:
                B[int(c1)] = b - SA
                c1 = c0
                b = SA + B[int(c1)]
            b += -1
            b[0] = ~int(T[j - 1]) if (0 < j and T[j - 1] > c1) else j
        elif j != 0:
            SA[i] = ~j
        else:
            pidx = i
        i -= 1
    return pidx

def _stage1_sort[X](T: ptr[X], SA: ptr[int], C: ptr[int], B: ptr[int], n: int, k: int, flags: int):
    _get_counts(T, C, n, k)
    _get_buckets(C, B, k, True)  # find ends of buckets
    i = 0
    while i < n:
        SA[i] = 0
        i += 1
    b = SA + (n - 1)
    i = n - 1
    j = n
    m = 0
    c0 = T[n - 1]
    c1 = c0
    while True:
        c1 = c0
        i -= 1
        if i < 0:
            break
        c0 = T[i]
        if c0 < c1:
            break
    while i >= 0:
        while True:
            c1 = c0
            i -= 1
            if i < 0:
                break
            c0 = T[i]
            if c0 > c1:
                break
        if i >= 0:
            b[0] = j
            B[int(c1)] -= 1
            b = SA + B[int(c1)]
            j = i
            m += 1
            assert B[int(c1)] != n - 1
            while True:
                c1 = c0
                i -= 1
                if i < 0:
                    break
                c0 = T[i]
                if c0 < c1:
                    break
    SA[n - 1] = 0

    name = 0
    if 1 < m:
        if flags & (16 | 32):
            assert j + 1 < n
            B[int(T[j + 1])] += 1
            if flags & 16:
                D = ptr[int](_gc.alloc_atomic(2 * k * _gc.sizeof[int]()))
                i = 0
                j = 0
                while i < k:
                    j += C[i]
                    if B[i] != j:
                        assert SA[int(B[i])] != 0
                        SA[int(B[i])] += n
                    D[i] = 0
                    D[i + k] = 0
                    i += 1
                _LMS_sort2(T, SA, C, B, D, n, k)
                _gc.free(ptr[byte](D))
            else:
                D = B + (-k * 2)
                i = 0
                j = 0
                while i < k:
                    j += C[i]
                    if B[i] != j:
                        assert SA[B[i]] != 0
                        SA[B[i]] += n
                    D[i] = 0
                    D[i + k] = 0
                    i += 1
                _LMS_sort2(T, SA, C, B, D, n, k)
            name = _LMS_post_proc2(SA, n, m)
        else:
            _LMS_sort1(T, SA, C, B, n, k, (flags & (4 | 64)) != 0)
            name = _LMS_post_proc1(T, SA, n, m)
    elif m == 1:
        b[0] = j + 1
        name = 1
    else:
        name = 0
    return m, name

def _stage3_sort[X](T: ptr[X], SA: ptr[int], C: ptr[int], B: ptr[int], n: int, m: int, k: int, flags: int, isbwt: bool):
    if flags & 8 != 0:
        _get_counts(T, C, n, k)
    if 1 < m:
        _get_buckets(C, B, k, True)  # find ends of buckets
        i = m - 1
        j = n
        p = SA[m - 1]
        c1 = T[p]
        while True:
            c0 = c1
            q = B[int(c0)]
            while q < j:
                j -= 1
                SA[j] = 0
            while True:
                j -= 1
                SA[j] = p
                i -= 1
                if i < 0:
                    break
                p = SA[i]
                c1 = T[p]
                if c1 != c0:
                    break
            if i < 0:
                break
        while j > 0:
            j -= 1
            SA[j] = 0

    pidx = 0
    if not isbwt:
        _induce_SA(T, SA, C, B, n, k, (flags & (4 | 64)) != 0)
    else:
        pidx = _compute_bwt(T, SA, C, B, n, k, (flags & (4 | 64)) != 0)
    return pidx

def _suffixsort[X](T: ptr[X], SA: ptr[int], fs: int, n: int, k: int, isbwt: bool):
    flags = 0

    # stage 1
    C = SA
    B = SA
    Cp = ptr[int]()
    Bp = ptr[int]()
    if k <= 256:
        Cp = ptr[int](_gc.alloc_atomic(k * _gc.sizeof[int]()))
        if k <= fs:
            B = SA + (n + fs - k)
            flags = 1
        else:
            Bp = ptr[int](_gc.alloc_atomic(k * _gc.sizeof[int]()))
            flags = 3
    elif k <= fs:
        C = SA + (n + fs - k)
        if k <= fs - k:
            B = C + (-k)
            flags = 0
        elif k <= 1024:
            Bp = ptr[int](_gc.alloc_atomic(k * _gc.sizeof[int]()))
            flags = 2
        else:
            B = C
            flags = 64 | 8
    else:
        Cp = ptr[int](_gc.alloc_atomic(k * _gc.sizeof[int]()))
        Bp = Cp
        flags = 4 | 8
    if 2 <= n // k:
        if flags & 1:
            flags |= (32 if (k * 2 <= fs - k) else 16)
        elif flags == 0 and k * 2 <= fs - k * 2:
            flags |= 32

    r = (0, 0)
    if Cp:
        if Bp:
            r = _stage1_sort(T, SA, Cp, Bp, n, k, flags)
        else:
            r = _stage1_sort(T, SA, Cp, B, n, k, flags)
    else:
        if Bp:
            r = _stage1_sort(T, SA, C, Bp, n, k, flags)
        else:
            r = _stage1_sort(T, SA, C, B, n, k, flags)
    m, name = r
    if m < 0:
        if flags & (1 | 4):
            _gc.free(ptr[byte](Cp))
        if flags & 2:
            _gc.free(ptr[byte](Bp))
        return -2

    # stage 2
    if name < m:
        if flags & 4:
            _gc.free(ptr[byte](Cp))
        if flags & 2:
            _gc.free(ptr[byte](Bp))
        newfs = (n + fs) - (m * 2)
        if flags & (1 | 4 | 64) == 0:
            if k + name <= newfs:
                newfs -= k
            else:
                flags |= 8
        assert (n >> 1) <= newfs + m
        RA = SA + m + newfs
        i = m + (n >> 1) - 1
        j = m - 1
        while m <= i:
            if SA[i] != 0:
                RA[j] = SA[i] - 1
                j -= 1
            i -= 1
        if _suffixsort(RA, SA, newfs, m, name, False) != 0:
            if flags & 1:
                _gc.free(ptr[byte](Cp))
            return -2
        i = n - 1
        j = m - 1
        c0 = T[n - 1]
        while True:
            c1 = c0
            i -= 1
            if i < 0:
                break
            c0 = T[i]
            if c0 < c1:
                break
        while i >= 0:
            while True:
                c1 = c0
                i -= 1
                if i < 0:
                    break
                c0 = T[i]
                if c0 > c1:
                    break
            if i >= 0:
                RA[j] = i + 1
                j -= 1
                while True:
                    c1 = c0
                    i -= 1
                    if i < 0:
                        break
                    c0 = T[i]
                    if c0 < c1:
                        break
        i = 0
        while i < m:
            SA[i] = RA[SA[i]]
            i += 1
        if flags & 4:
            Cp = ptr[int](_gc.alloc_atomic(k * _gc.sizeof[int]()))
            Bp = Cp
        if flags & 2:
            Bp = ptr[int](_gc.alloc_atomic(k * _gc.sizeof[int]()))

    # stage 3
    pidx = 0
    if Cp:
        if Bp:
            pidx = _stage3_sort(T, SA, Cp, Bp, n, m, k, flags, isbwt)
        else:
            pidx = _stage3_sort(T, SA, Cp, B, n, m, k, flags, isbwt)
    else:
        if Bp:
            pidx = _stage3_sort(T, SA, C, Bp, n, m, k, flags, isbwt)
        else:
            pidx = _stage3_sort(T, SA, C, B, n, m, k, flags, isbwt)
        if flags & (1 | 4):
            _gc.free(ptr[byte](Cp))
        if flags & 2:
            _gc.free(ptr[byte](Bp))

    return pidx

def _saisxx(T: ptr[byte], n: int, k: int = 256) -> ptr[int]:
    if n < 0 or k <= 0:
        raise ValueError("need n >= 0 and k > 0!")
    SA = ptr[int](_gc.alloc_atomic((n + 1) * _gc.sizeof[int]()))
    if n <= 1:
        if n == 1:
            SA[0] = 0
        return SA
    pidx = _suffixsort(T, SA, 0, n, k, False)
    return SA

def _saisxx_bwt(T: ptr[byte], n: int, k: int = 256) -> ptr[byte]:
    if n < 0 or k <= 0:
        raise ValueError("need n >= 0 and k > 0!")
    if n == 0:
        return '$'.ptr
    U = _gc.alloc_atomic(n + 1)
    if n == 1:
        U[0] = T[0]
        U[1] = byte(36)  # $
        return U
    A = ptr[int](_gc.alloc_atomic((n + 1) * _gc.sizeof[int]()))
    pidx = _suffixsort(T, A, 0, n, k, True)
    if 0 <= pidx:
        U[0] = T[n - 1]
        i = 0
        while i < pidx:
            U[i + 1] = byte(A[i])
            i += 1
        i += 1
        U[i] = byte(36)  # $
        while i < n:
            #U[i] = byte(A[i])
            U[i + 1] = byte(A[i])
            i += 1
        pidx += 1
    return U

extend seq:
    def suffix_array(self: seq):
        p = self.ptr
        n = self.len
        if n < 0:  # revcomp'd
            p = str(self).ptr
            n = -n
        SA = _saisxx(p, n)
        return list[int](array[int](SA, n), n)

    def bwt(self: seq):
        p = self.ptr
        n = self.len
        if n < 0:  # revcomp'd
            p = str(self).ptr
            n = -n
        B = _saisxx_bwt(p, n)
        return seq(B, n + 1)

from bio.pseq import pseq
extend pseq:
    def suffix_array(self: pseq):
        p = self.ptr
        n = self.len
        SA = _saisxx(p, n)
        return list[int](array[int](SA, n), n)

    def bwt(self: pseq):
        p = self.ptr
        n = self.len
        B = _saisxx_bwt(p, n)
        return seq(B, n + 1)
