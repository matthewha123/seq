# htslib integration
BAM_FPAIRED        =    1
BAM_FPROPER_PAIR   =    2
BAM_FUNMAP         =    4
BAM_FMUNMAP        =    8
BAM_FREVERSE       =   16
BAM_FMREVERSE      =   32
BAM_FREAD1         =   64
BAM_FREAD2         =  128
BAM_FSECONDARY     =  256
BAM_FQCFAIL        =  512
BAM_FDUP           = 1024
BAM_FSUPPLEMENTARY = 2048

from bio.align import CIGAR
from bio.locus import Contig, Locus

from c_htslib import *

# This type must be consistent with htslib:
type _sam_hdr_t(n_targets: i32,
                ignore_sam_err: i32,
                l_text: int,
                target_len: ptr[u32],
                cigar_tab: ptr[byte],
                target_name: ptr[ptr[byte]],
                text: ptr[byte],
                sdict: cobj,
                hrecs: cobj,
                ref_count: u32):
    def contigs(self: _sam_hdr_t) -> list[Contig]:
        return [Contig(tid=i, name=str.from_ptr(self.target_name[i]), len=int(self.target_len[i]))
                  for i in range(int(self.n_targets))]

# This type must be consistent with htslib:
type _bam_core_t(_pos: i64,
                 _tid: i32,
                 _bin: u16,
                 _qual: u8,
                 _l_extranul: u8,
                 _flag: u16,
                 _l_qname: u16,
                 _n_cigar: u32,
                 _l_qseq: i32,
                 _mtid: i32,
                 _mpos: i64,
                 _isize: i64):
    def __init__(self: _bam_core_t) -> _bam_core_t:
        return (i64(0), i32(0), u16(0), u8(0), u8(0), u16(0), u16(0), u32(0), i32(0), i32(0), i64(0), i64(0))

# This type must be consistent with htslib:
type _bam1_t(core: _bam_core_t,
             id: u64,
             data: ptr[byte],
             l_data: i32,
             m_data: u32,
             mem_policy: u32):
    def __init__(self: _bam1_t) -> _bam1_t:
        BAM_USER_OWNS_STRUCT = 1  # see htslib's sam.h
        return (_bam_core_t(), u64(0), ptr[byte](), i32(0), u32(0), u32(BAM_USER_OWNS_STRUCT))

    def __copy__(self: _bam1_t) -> _bam1_t:
        data = ptr[byte](int(self.l_data))
        str.memcpy(data, self.data, int(self.l_data))
        return (self.core, self.id, data, self.l_data, u32(self.l_data), self.mem_policy)

    @property
    def tid(self: _bam1_t):
        return int(self.core._tid)

    @property
    def pos(self: _bam1_t):
        return int(self.core._pos)

    @property
    def mapq(self: _bam1_t):
        return int(self.core._qual)

    @property
    def flag(self: _bam1_t):
        return int(self.core._flag)

    @property
    def mtid(self: _bam1_t):
        return int(self.core._mtid)

    @property
    def mpos(self: _bam1_t):
        return int(self.core._mpos)

    @property
    def isize(self: _bam1_t):
        return int(self.core._isize)

type SAMAux(s: ptr[u8]):
    def __bool__(self: SAMAux):
        return bool(self.s)

    @property
    def i(self: SAMAux):
        return bam_aux2i(self.s)

    @property
    def f(self: SAMAux):
        return bam_aux2f(self.s)

    @property
    def A(self: SAMAux):
        return bam_aux2A(self.s)

    @property
    def Z(self: SAMAux):
        return str.from_ptr(bam_aux2Z(self.s))

    @property
    def B_len(self: SAMAux):
        return int(bam_auxB_len(self.s))

    def B2i(self: SAMAux, idx: int):
        return bam_auxB2i(self.s, u32(idx))

    def B2f(self: SAMAux, idx: int):
        return bam_auxB2f(self.s, u32(idx))

    def __str__(self: SAMAux):
        return str.from_ptr(bam_aux2Z(self.s))

class SAMRecord:
    _htsr: _bam1_t
    _read: seq
    _qual: str

    def __init__(self: SAMRecord, htslib_record: _bam1_t):
        self._htsr = htslib_record
        self._read = s''
        self._qual = ''

    @property
    def name(self: SAMRecord):
        return str(self._htsr.data, int(self._htsr.core._l_qname) - int(self._htsr.core._l_extranul) - 1)

    @property
    def query_name(self: SAMRecord):
        return self.name

    @property
    def read(self: SAMRecord):
        if not self._read:
            hts_seq = self._htsr.data + ((int(self._htsr.core._n_cigar) << 2) + int(self._htsr.core._l_qname))
            n = int(self._htsr.core._l_qseq)
            seq_nt16_str = "=ACMGRSVTWYHKDBN"  # see htslib's hts.c
            buf = ptr[byte](n)
            i = 0
            while i < n:
                buf[i] = seq_nt16_str.ptr[int(hts_seq[i>>1]) >> ((~i&1)<<2) & 0xf]
                i += 1
            self._read = seq(buf, n)
        assert self._read.len >= 0
        return self._read

    @property
    def seq(self: SAMRecord):
        return self.read

    @property
    def qual(self: SAMRecord):
        if not self._qual:
            hts_qual = self._htsr.data + ((int(self._htsr.core._n_cigar) << 2) + int(self._htsr.core._l_qname) + ((int(self._htsr.core._l_qseq) + 1) >> 1))
            n = int(self._htsr.core._l_qseq)
            buf = ptr[byte](n)
            i = 0
            while i < n:
                buf[i] = byte(int(hts_qual[i]) + 33)
                i += 1
            self._qual = str(buf, n)
        return self._qual

    @property
    def cigar(self: SAMRecord):
        return CIGAR(ptr[u32](self._htsr.data + int(self._htsr.core._l_qname)), int(self._htsr.core._n_cigar))

    @property
    def tid(self: SAMRecord):
        return self._htsr.tid

    @property
    def pos(self: SAMRecord):
        return self._htsr.pos

    @property
    def locus(self: SAMRecord):
        pos = self.pos
        return Locus(self.tid, -pos if self.reversed else pos)

    @property
    def mate_tid(self: SAMRecord):
        return self._htsr.mtid

    @property
    def mate_pos(self: SAMRecord):
        return self._htsr.mpos

    @property
    def mate_locus(self: SAMRecord):
        pos = self.mate_pos
        return Locus(self.mate_tid, -pos if self.mate_reversed else pos)

    @property
    def mapq(self: SAMRecord):
        return self._htsr.mapq

    @property
    def insert_size(self: SAMRecord):
        return self._htsr.isize

    @property
    def paired(self: SAMRecord):
        return self._htsr.flag & BAM_FREVERSE != 0

    @property
    def proper_pair(self: SAMRecord):
        return self._htsr.flag & BAM_FPROPER_PAIR != 0

    @property
    def unmapped(self: SAMRecord):
        return self._htsr.flag & BAM_FUNMAP != 0

    @property
    def mate_unmapped(self: SAMRecord):
        return self._htsr.flag & BAM_FMUNMAP != 0

    @property
    def reversed(self: SAMRecord):
        return self._htsr.flag & BAM_FREVERSE != 0

    @property
    def mate_reversed(self: SAMRecord):
        return self._htsr.flag & BAM_FMREVERSE != 0

    @property
    def read1(self: SAMRecord):
        return self._htsr.flag & BAM_FREAD1 != 0

    @property
    def read2(self: SAMRecord):
        return self._htsr.flag & BAM_FREAD2 != 0

    @property
    def secondary(self: SAMRecord):
        return self._htsr.flag & BAM_FSECONDARY != 0

    @property
    def qc_fail(self: SAMRecord):
        return self._htsr.flag & BAM_FQCFAIL != 0

    @property
    def duplicate(self: SAMRecord):
        return self._htsr.flag & BAM_FDUP != 0

    @property
    def supplementary(self: SAMRecord):
        return self._htsr.flag & BAM_FSUPPLEMENTARY != 0

    def aux(self: SAMRecord, tag: str):
        if len(tag) != 2:
            raise ValueError(f"SAM aux tags are exactly two characters in length (got: tag of length {len(tag)})")
        tag_arr = (tag.ptr[0], tag.ptr[1])
        '''
        hts_aux = (self._htsr.data +
                    ((int(self._htsr.core._n_cigar) << 2) +
                     int(self._htsr.core._l_qname) +
                     ((int(self._htsr.core._l_qseq) + 1) >> 1) +
                     int(self._htsr.core._l_qseq)))
        n = int(self._htsr.l_data) - (int(self._hts.core._n_cigar) << 2) - int(self._htsr.core._l_qname) -
            int(self._htsr.core._l_qseq) - ((int(self._htsr.core._l_qseq) + 1) >> 1)
        '''
        return SAMAux(bam_aux_get(self.__raw__(), ptr[byte](__ptr__(tag_arr))))

class BAMReader:
    _aln: _bam1_t
    _copy: bool
    _file: cobj
    _idx: cobj
    _hdr: cobj
    _itr: cobj
    _contigs: list[Contig]

    def __init__(self: BAMReader, path: str, region: str, copy: bool):
        path_c_str, region_c_str = path.c_str(), region.c_str()

        file = hts_open(path_c_str, "rb".c_str())
        if not file:
            raise IOError("file " + path + " could not be opened")

        idx = sam_index_load(file, path_c_str)
        if not idx:
            hts_close(file)
            raise IOError("unable to open BAM/CRAM index for " + path)

        hdr = sam_hdr_read(file)
        itr = sam_itr_querys(idx, hdr, region_c_str)

        if not hdr or not itr:
            hts_close(file)
            raise IOError("unable to seek to region " + region + " in " + path)

        self._aln = _bam1_t()
        self._copy = copy
        self._file = file
        self._idx = idx
        self._hdr = hdr
        self._itr = itr
        self._contigs = ptr[_sam_hdr_t](hdr)[0].contigs()

    def seek(self: BAMReader, region: str):
        if self._itr:
            hts_itr_destroy(self._itr)
        self._itr = sam_itr_querys(self._idx, self._hdr, region.c_str())
        if not self._itr:
            hts_close(self._file)
            raise IOError("unable to seek to region " + region)

    def _ensure_open(self: BAMReader):
        if not self._file:
            raise IOError("I/O operation on closed BAM/CRAM file")

    def __blocks__(self: BAMReader, size: int):
        from bio.block import _blocks
        return _blocks(self.__iter__(), size)

    def __seqs__(self: BAMReader):
        for rec in self:
            yield rec.seq

    def __iter__(self: BAMReader):
        self._ensure_open()
        while sam_itr_next(self._file, self._itr, self.__raw__()) >= 0:
            yield SAMRecord(copy(self._aln) if self._copy else self._aln)
        if self._itr:
            hts_itr_destroy(self._itr)
            self._itr = cobj()

    def close(self: BAMReader):
        bam_destroy1(self.__raw__())

        if self._itr:
            hts_itr_destroy(self._itr)

        if self._idx:
            hts_idx_destroy(self._idx)

        if self._hdr:
            sam_hdr_destroy(self._hdr)

        if self._file:
            hts_close(self._file)

        self._itr = cobj()
        self._idx = cobj()
        self._hdr = cobj()
        self._file = cobj()

    def __enter__(self: BAMReader):
        pass

    def __exit__(self: BAMReader):
        self.close()

    def contigs(self: BAMReader):
        return self._contigs

    def contig(self: BAMReader, rid: int):
        return self._contigs[rid]

class SAMReader:
    _aln: _bam1_t
    _copy: bool
    _file: cobj
    _hdr: cobj
    _contigs: list[Contig]

    def __init__(self: SAMReader, path: str, copy: bool):
        path_c_str = path.c_str()

        file = hts_open(path_c_str, "r".c_str())
        if not file:
            raise IOError("file " + path + " could not be opened")

        hdr = sam_hdr_read(file)
        self._aln = _bam1_t()
        self._copy = copy
        self._file = file
        self._hdr = hdr
        self._contigs = ptr[_sam_hdr_t](hdr)[0].contigs()

    def _ensure_open(self: SAMReader):
        if not self._file:
            raise IOError("I/O operation on closed SAM file")

    def __seqs__(self: SAMReader):
        for rec in self:
            yield rec.seq

    def __iter__(self: SAMReader):
        self._ensure_open()
        while True:
            status = int(sam_read1(self._file, self._hdr, self.__raw__()))
            if status >= 0:
                yield SAMRecord(copy(self._aln) if self._copy else self._aln)
            elif status == -1:
                break
            else:
                raise IOError("SAM read failed with status: " + str(status))
        self.close()

    def __blocks__(self: SAMReader, size: int):
        from bio.block import _blocks
        return _blocks(self.__iter__(), size)

    def close(self: SAMReader):
        bam_destroy1(self.__raw__())

        if self._hdr:
            sam_hdr_destroy(self._hdr)

        if self._file:
            hts_close(self._file)

        self._file = cobj()
        self._hdr = cobj()

    def __enter__(self: SAMReader):
        pass

    def __exit__(self: SAMReader):
        self.close()

    def contigs(self: SAMReader):
        return self._contigs

    def contig(self: SAMReader, rid: int):
        return self._contigs[rid]

type CRAMReader = BAMReader

def SAM(path: str, copy: bool = True):
    return SAMReader(path, copy)

def BAM(path: str, region: str = ".", copy: bool = True):
    return BAMReader(path, region, copy)

def CRAM(path: str, region: str = ".", copy: bool = True):
    return CRAMReader(path, region, copy)
