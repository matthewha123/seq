class min[T]:
    def __init__(self: min[T], a: T, b: T) -> T:
        return a if a < b else b

    def __init__(self: min[T], a: T, b: T, c: T) -> T:
        x = a if a < b else b
        return x if x < c else c

    def __init__(self: min[T], a: T, b: T, c: T, d: T) -> T:
        x = a if a < b else b
        y = c if c < d else d
        return x if x < y else y

    def __init__(self: min[T], a: T, b: T, c: T, d: T, e: T) -> T:
        x = a if a < b else b
        y = c if c < d else d
        z = x if x < y else y
        return z if z < e else e

    def __init__(self: min[T], a: generator[T]) -> T:
        x = a.__iter__()
        if not x.done():
            s = x.next()
            while not x.done():
                i = x.next()
                if i < s: s = i
            x.destroy()
            return s
        else:
            x.destroy()
        raise ValueError("empty sequence")

class max[T]:
    def __init__(self: max[T], a: T, b: T) -> T:
        return a if a > b else b

    def __init__(self: max[T], a: T, b: T, c: T) -> T:
        x = a if a > b else b
        return x if x > c else c

    def __init__(self: max[T], a: T, b: T, c: T, d: T) -> T:
        x = a if a > b else b
        y = c if c > d else d
        return x if x > y else y

    def __init__(self: max[T], a: T, b: T, c: T, d: T, e: T) -> T:
        x = a if a > b else b
        y = c if c > d else d
        z = x if x > y else y
        return z if z > e else e

    def __init__(self: max[T], a: generator[T]) -> T:
        x = a.__iter__()
        if not x.done():
            s = x.next()
            while not x.done():
                i = x.next()
                if i > s: s = i
            x.destroy()
            return s
        else:
            x.destroy()
        raise ValueError("empty sequence")

@builtin
def min2(a, b):
    return a if a < b else b

@builtin
def max2(a, b):
    return a if a > b else b

@builtin
def len(x):
    """
    len(x)

    Return the length of x
    """
    return x.__len__()

@builtin
def iter(x):
    """
    iter(x)

    Return an iterator for the given object
    """
    return x.__iter__()

@builtin
def copy(x):
    """
    copy(x)

    Return a copy of x
    """
    return x.__copy__()

@builtin
def abs(x):
    """
    abs(x)

    Return the absolute value of x
    """
    return x.__abs__()

@builtin
def hash(x):
    """
    hash(x)

    Returns hashed value only for immutable objects
    """
    return x.__hash__()

@builtin
def ord(s: str):
    """
    ord(s)

    Return an integer representing the Unicode code point of s
    """
    if len(s) != 1:
        raise TypeError("ord() expected a character, but string of length " + str(len(s)) + " found")
    return int(s.ptr[0])

@builtin
def chr(i: int):
    """
    chr(i)

    Return a string representing a character whose Unicode
    code point is an integer
    """
    p = cobj(1)
    p[0] = byte(i)
    return str(p, 1)

@builtin
def next[T](g: generator[T], default: optional[T] = None):
    """
    next(g)

    Return the next item from g
    """
    if g.done():
        if default:
            return ~default
        else:
            raise StopIteration()
    return g.next()

@builtin
def any(x):
    """
    any(x)

    Returns True if any item in x is true,
    False otherwise
    """
    for a in x:
        if a:
            return True
    return False

@builtin
def all(x):
    """
    all(x)

    Returns True when all elements in x are true,
    False otherwise
    """
    for a in x:
        if not a:
            return False
    return True

@builtin
def zip(a, b):
    """
    zip(a, b)

    Returns a zip object, which is an iterator of tuples
    that aggregates elements based on the iterables passed
    """
    bi = iter(b)
    for i in a:
        if bi.done(): break
        yield (i, bi.next())
    bi.destroy()

@builtin
def filter(f, x):
    """
    filter(f, x)

    Returns all a from the iterable x that are filtered by f
    """
    for a in x:
        if f(a):
            yield a

@builtin
def map(f, x):
    """
    map(f, x)

    Applies a function on all a in x and returns map object
    """
    for a in x:
        yield f(a)

@builtin
def enumerate(x, start: int = 0):
    """
    enumerate(x)

    Creates a tuple containing a count (from start which defaults
    to 0) and the values obtained from iterating over x
    """
    i = start
    for a in x:
        yield (i,a)
        i += 1

@builtin
def echo(x):
    """
    echo(x)

    Return the output of x
    """
    print x
    return x

@builtin
def reversed(x):
    """
    reversed(x)

    Return an iterator that accesses x in the reverse order
    """
    return x.__reversed__()

@builtin
def round(x, n) -> float:
    """
    round(x, n)

    Return the x rounded off to the given
    n digits after the decimal point.
    """
    nx = _C.pow(10.0, float(n))
    return _C.round(float(x * nx)) / nx

@builtin
def sum(xi):
    """
    sum(xi)

    Return the sum of the items added together from xi
    """
    x = iter(xi)
    if not x.done():
        s = x.next()
        while not x.done():
            s += x.next()
        x.destroy()
        return s
    else:
        x.destroy()

@builtin
def repr(x):
    """
    repr(x)
    Return the string representation of x
    """
    return x.__repr__()

@builtin
def _tuple_fix_index(idx: int, len: int) -> int:
    if idx < 0:
        idx += len
    if idx < 0 or idx >= len:
        raise IndexError("tuple index out of range")
    return idx

@builtin
def _tuple_str(strs: ptr[str], n: int) -> str:
    total = 2  # one for each of '(' and ')'
    i = 0
    while i < n:
        total += strs[i].len
        if i < n - 1:
            total += 2  # ", "
        i += 1

    buf = ptr[byte](total)
    where = 0
    buf[where] = byte(40)  # '('
    where += 1

    i = 0
    while i < n:
        s = strs[i]
        l = s.len
        str.memcpy(buf + where, s.ptr, l)
        where += l
        if i < n - 1:
            buf[where] = byte(44)  # ','
            where += 1
            buf[where] = byte(32)  # ' '
            where += 1
        i += 1
    buf[where] = byte(41)  # ')'

    return str(buf, total)

@builtin
def _raw_type_str(p: ptr[byte], name: str) -> str:
    pstr = _C.seq_str_ptr(p)
    # '<[name] at [pstr]>'
    total = 1 + name.len + 4 + pstr.len + 1
    buf = ptr[byte](total)
    where = 0

    buf[where] = byte(60)   # '<'
    where += 1
    str.memcpy(buf + where, name.ptr, name.len)
    where += name.len
    buf[where] = byte(32)   # ' '
    where += 1
    buf[where] = byte(97)   # 'a'
    where += 1
    buf[where] = byte(116)  # 't'
    where += 1
    buf[where] = byte(32)   # ' '
    where += 1
    str.memcpy(buf + where, pstr.ptr, pstr.len)
    where += pstr.len
    buf[where] = byte(62)  # '>'
    _gc.free(pstr.ptr)
    return str(buf, total)

@builtin
def _ensure_not_none(p: ptr[byte], memb: str):
    if not p:
        raise AttributeError("'NoneType' object has no attribute '" + memb + "'")
