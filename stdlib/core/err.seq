# Warning(!): This type must be consistent with the exception
# header type defined in runtime/exc.cpp.
type ExcHeader(typename: str,
               msg: str,
               func: str,
               file: str,
               line: int,
               col: int)

class OSError:
    _hdr: ExcHeader

    def __init__(self: OSError):
        self._hdr = ('OSError', '', '', '', 0, 0)

    def __init__(self: OSError, message: str):
        self._hdr = ('OSError', message, '', '', 0, 0)

    @property
    def message(self: OSError):
        return self._hdr.msg

class IOError:
    _hdr: ExcHeader

    def __init__(self: IOError):
        self._hdr = ('IOError', '', '', '', 0, 0)

    def __init__(self: IOError, message: str):
        self._hdr = ('IOError', message, '', '', 0, 0)

    @property
    def message(self: IOError):
        return self._hdr.msg

class ValueError:
    _hdr: ExcHeader

    def __init__(self: ValueError):
        self._hdr = ('ValueError', '', '', '', 0, 0)

    def __init__(self: ValueError, message: str):
        self._hdr = ('ValueError', message, '', '', 0, 0)

    @property
    def message(self: ValueError):
        return self._hdr.msg

class IndexError:
    _hdr: ExcHeader

    def __init__(self: IndexError):
        self._hdr = ('IndexError', '', '', '', 0, 0)

    def __init__(self: IndexError, message: str):
        self._hdr = ('IndexError', message, '', '', 0, 0)

    @property
    def message(self: IndexError):
        return self._hdr.msg

class KeyError:
    _hdr: ExcHeader

    def __init__(self: KeyError):
        self._hdr = ('KeyError', '', '', '', 0, 0)

    def __init__(self: KeyError, message: str):
        self._hdr = ('KeyError', message, '', '', 0, 0)

    @property
    def message(self: KeyError):
        return self._hdr.msg

class CError:
    _hdr: ExcHeader

    def __init__(self: CError):
        self._hdr = ('CError', '', '', '', 0, 0)

    def __init__(self: CError, message: str):
        self._hdr = ('CError', message, '', '', 0, 0)

    @property
    def message(self: CError):
        return self._hdr.msg

class PyError:
    _hdr: ExcHeader
    pytype: str

    def __init__(self: PyError, message: str, pytype: str):
        self._hdr = ('PyError', message, '', '', 0, 0)
        self.pytype = pytype

    @property
    def message(self: PyError):
        return self._hdr.msg

class TypeError:
    _hdr: ExcHeader

    def __init__(self: TypeError):
        self._hdr = ('TypeError', '', '', '', 0, 0)

    def __init__(self: TypeError, message: str):
        self._hdr = ('TypeError', message, '', '', 0, 0)

    @property
    def message(self: TypeError):
        return self._hdr.msg

class ZeroDivisionError:
    _hdr: ExcHeader

    def __init__(self: ZeroDivisionError):
        self._hdr = ('ZeroDivisionError', '', '', '', 0, 0)

    def __init__(self: ZeroDivisionError, message: str):
        self._hdr = ('ZeroDivisionError', message, '', '', 0, 0)

    @property
    def message(self: ZeroDivisionError):
        return self._hdr.msg

class AttributeError:
    _hdr: ExcHeader

    def __init__(self: AttributeError):
        self._hdr = ('AttributeError', '', '', '', 0, 0)

    def __init__(self: AttributeError, message: str):
        self._hdr = ('AttributeError', message, '', '', 0, 0)

    @property
    def message(self: AttributeError):
        return self._hdr.msg

class NotImplementedError:
    _hdr: ExcHeader

    def __init__(self: NotImplementedError):
        self._hdr = ('NotImplementedError', '', '', '', 0, 0)

    def __init__(self: NotImplementedError, message: str):
        self._hdr = ('NotImplementedError', message, '', '', 0, 0)

    @property
    def message(self: NotImplementedError):
        return self._hdr.msg

class StopIteration:
    _hdr: ExcHeader

    def __init__(self: StopIteration):
        self._hdr = ('StopIteration', '', '', '', 0, 0)

    def __init__(self: StopIteration, message: str):
        self._hdr = ('StopIteration', message, '', '', 0, 0)

    @property
    def message(self: StopIteration):
        return self._hdr.msg

class AssertionError:
    _hdr: ExcHeader

    def __init__(self: AssertionError):
        self._hdr = ('AssertionError', '', '', '', 0, 0)

    def __init__(self: AssertionError, message: str):
        self._hdr = ('AssertionError', message, '', '', 0, 0)

    @property
    def message(self: AssertionError):
        return self._hdr.msg

class SystemExit:
    _hdr: ExcHeader
    _status: int

    def __init__(self: SystemExit):
        self._hdr = ('SystemExit', '', '', '', 0, 0)
        self._status = 0

    def __init__(self: SystemExit, status: int):
        self._hdr = ('SystemExit', '', '', '', 0, 0)
        self._status = status

    def __init__(self: SystemExit, message: str):
        self._hdr = ('SystemExit', message, '', '', 0, 0)
        self._status = 0

    def __init__(self: SystemExit, message: str, status: int):
        self._hdr = ('SystemExit', message, '', '', 0, 0)
        self._status = status

    @property
    def message(self: SystemExit):
        return self._hdr.msg

    @property
    def status(self: SystemExit):
        return self._status

def check_errno(prefix: str):
    msg = _C.seq_check_errno()
    if msg:
        raise OSError(prefix + msg)

@builtin
def _make_assert_error(msg: str) -> AssertionError:
    return AssertionError(msg)

@builtin
def _test_failed(file: str, line: int, msg: str):
    s = "\033[1;31mTEST FAILED:\033[0m " + file + " (line " + str(line) + ")"
    if msg:
        s += ": " + msg
    print s

@builtin
def _handle_exit(e: SystemExit):
    _C.exit(e.status)
