from algorithms.timsort import tim_sort_inplace
from algorithms.pdqsort import pdq_sort_inplace
from algorithms.insertionsort import insertion_sort_inplace
from algorithms.heapsort import heap_sort_inplace
from algorithms.qsort import qsort_inplace

@deduceall
def sorted[S,T](
    v: generator[T],
    key: optional[function[S,T]] = None,
    algorithm: optional[str] = None,
    reverse: bool = False
):
    """
    sorted(v)

    Return a sorted list of the elements in v
    """
    newlist = [a for a in v]
    if key:
        if algorithm:
            newlist.sort(~key, ~algorithm, reverse)
        else:
            newlist.sort(~key, None, reverse)
    else:
        if algorithm:
            newlist.sort(None, ~algorithm, reverse)
        else:
            newlist.sort(None, None, reverse)
    return newlist

def _sort_list[T,S](self: list[T], key: function[S,T], algorithm: str):
    if algorithm == 'pdq':
        pdq_sort_inplace(self, key)
    elif algorithm == 'insertion':
        insertion_sort_inplace(self, key)
    elif algorithm == 'heap':
        heap_sort_inplace(self, key)
        #case 'tim':
        #    tim_sort_inplace(self, key)
    elif algorithm == 'quick':
        qsort_inplace(self, key)
    else:
        raise ValueError("Algorithm '" + algorithm + "' does not exist")

extend list[T]:
    @deduceall
    def sort[S](
        self: list[T],
        key: optional[function[S,T]] = None,
        algorithm: optional[str] = None,
        reverse: bool = False
    ):
        def ident[T](x: T):
            return x

        alg = ~algorithm if algorithm else 'pdq'
        if key:
            _sort_list(self, ~key, alg)
        else:
            _sort_list(self, ident[T], alg)
        if reverse:
            self.reverse()
